openapi: 3.0.3
info:
  title: QuizMaster API
  description: REST API for managing quizzes, users, scores, and admin tasks.
  version: "1.0.0"
servers:
  - url: http://localhost:5000

tags:
  - name: Admin
  - name: User

paths:

  /api/login/admin:
    post:
      tags: [Admin]
      summary: Admin login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Login success
        '401':
          description: Invalid credentials

  /api/login/user:
    post:
      tags: [User]
      summary: User login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Login success
        '401':
          description: Invalid credentials

  /api/register:
    post:
      tags: [User]
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [username, password, email, dob]
              properties:
                username:
                  type: string
                password:
                  type: string
                email:
                  type: string
                full_name:
                  type: string
                qualification:
                  type: string
                dob:
                  type: string
                  format: date
      responses:
        '201':
          description: User created
        '400':
          description: Validation failed

  /api/subjects:
    get:
      tags: [Admin, User]
      summary: Get all subjects
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of subjects

    post:
      tags: [Admin]
      summary: Add a subject
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name]
              properties:
                name:
                  type: string
                description:
                  type: string
      responses:
        '200':
          description: Subject added

  /api/subjects/{subject_id}:
    put:
      tags: [Admin]
      summary: Update subject
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: subject_id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
      responses:
        '200':
          description: Subject updated

    delete:
      tags: [Admin]
      summary: Delete subject
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: subject_id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Subject deleted

  /api/chapters:
    get:
      tags: [Admin]
      summary: Get all chapters
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of chapters

    post:
      tags: [Admin]
      summary: Add a chapter
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name, subject_id]
              properties:
                name:
                  type: string
                description:
                  type: string
                subject_id:
                  type: integer
      responses:
        '200':
          description: Chapter added

  /api/chapters/by_subject:
    get:
      tags: [Admin, User]
      summary: Get chapters for a subject
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: subject_id
          schema:
            type: integer
      responses:
        '200':
          description: Chapters list

  /api/quizzes:
    get:
      tags: [Admin]
      summary: Get quizzes (optionally filtered)
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: subject_id
          schema:
            type: integer
        - in: query
          name: chapter_id
          schema:
            type: integer
      responses:
        '200':
          description: List of quizzes

    post:
      tags: [Admin]
      summary: Add a new quiz
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required: [chapter_id, date_of_quiz, time_duration]
              properties:
                chapter_id:
                  type: integer
                date_of_quiz:
                  type: string
                  format: date
                time_duration:
                  type: string
                remarks:
                  type: string
      responses:
        '200':
          description: Quiz created

  /api/user/quiz/{quiz_id}:
    get:
      tags: [User]
      summary: Start quiz
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: quiz_id
          schema:
            type: integer
            required: true
      responses:
        '200':
          description: Quiz data or already attempted

  /api/submit_quiz/{quiz_id}:
    post:
      tags: [User]
      summary: Submit quiz with answers and statuses
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: quiz_id
          schema:
            type: integer
            required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                answers:
                  type: object
                statuses:
                  type: object
                timestamp:
                  type: string
                  format: date-time
      responses:
        '200':
          description: Submission successful

  /api/user/summary:
    get:
      tags: [User]
      summary: Get user summary
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Subject-wise quiz attempts and scores

  /api/admin/summary:
    get:
      tags: [Admin]
      summary: Admin analytics summary
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Top scores and user attempts

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  /api/questions/{quiz_id}:
    get:
      tags: [Admin, User]
      summary: Get questions for a quiz
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: quiz_id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: List of questions

  /api/questions:
    post:
      tags: [Admin]
      summary: Add a new question
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - quiz_id
                - question_statement
                - option1
                - option2
                - option3
                - option4
                - correct_option
              properties:
                quiz_id:
                  type: integer
                question_statement:
                  type: string
                option1:
                  type: string
                option2:
                  type: string
                option3:
                  type: string
                option4:
                  type: string
                correct_option:
                  type: integer
      responses:
        '200':
          description: Question added

  /api/questions/{question_id}:
    put:
      tags: [Admin]
      summary: Edit a question
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: question_id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                question_statement:
                  type: string
                option1:
                  type: string
                option2:
                  type: string
                option3:
                  type: string
                option4:
                  type: string
                correct_option:
                  type: integer
      responses:
        '200':
          description: Question updated

    delete:
      tags: [Admin]
      summary: Delete a question
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: question_id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Question deleted

  /api/user/export-csv:
    post:
      tags: [User]
      summary: Trigger CSV export tasks
      security:
        - bearerAuth: []
      responses:
        '202':
          description: Task started

  /api/user/export-status/{task_id}:
    get:
      tags: [User]
      summary: Check CSV export task status
      parameters:
        - in: path
          name: task_id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Task status

  /download/{filename}:
    get:
      tags: [User]
      summary: Download generated CSV
      parameters:
        - in: path
          name: filename
          required: true
          schema:
            type: string
      responses:
        '200':
          description: CSV file download
